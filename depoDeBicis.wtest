import depositos.*
import bicis.*
import accesorios.*


describe "bicis y depos tesssst" {

  var bici1 = new Bici(rodado = 28, largo = 150, marca = olmo)
  var farolitoB1 = new Farolito()

  
  var bici2 = new Bici(rodado = 26, largo = 110, marca = legnano)
  var farolitoB2 = new Farolito() 
  var canastoB2 = new Canasto(volumen = 8)
  var morralB2 = new Morral(largo = 21, tieneOjoDeGato = true)

  var bici3 = new Bici(rodado = 20, largo = 90, marca = legnano)
  var morralB3 = new Morral(largo = 6, tieneOjoDeGato = false)

  var bici4 = new Bici(rodado = 26, largo = 180, marca = olmo)
  var canastoB4 = new Canasto(volumen = 12)

  var bici5 = new Bici(rodado = 24, largo = 119, marca = legnano)

  var mariadb = new Deposito()

  method initialize() {
    bici1.agregarAccesorio(farolitoB1)

    bici2.agregarAccesorio(farolitoB2)
    bici2.agregarAccesorio(canastoB2)
    bici2.agregarAccesorio(morralB2)

    bici3.agregarAccesorio(morralB3)

    mariadb.agregarBicis([bici1, bici2, bici3])
  }

//etapa 1:

  test "la bici 1 tiene altura 85, velocidad 34, carga 0, peso 14.5, tiene luz , tiene 1 accesorio liviano" {
    assert.equals(85, bici1.altura())
    assert.equals(34, bici1.velocidad())
    assert.equals(0, bici1.carga())
    assert.equals(14.5, bici1.peso())
    assert.that(bici1.tieneLuz())
    assert.equals(1, bici1.cantidadAccesoriosLivianos())
  }

  test "la bici 2 tiene altura 80, velocidad 28, carga 23, peso 15.5, tiene luz, 2 accesorios livianos" {
    assert.equals(80, bici2.altura())
    assert.equals(28, bici2.velocidad())
    assert.equals(23, bici2.carga())
    assert.equals(15.5, bici2.peso())
    assert.that(bici2.tieneLuz())
    assert.equals(2, bici2.cantidadAccesoriosLivianos())
  }

  test "la bici 3 tiene altura 65, velocidad de crucero 22, carga 2, peso 11.2, no tiene luz, no tiene ningún accesorio liviano." {
    assert.equals(65, bici3.altura())
    assert.equals(22, bici3.velocidad())
    assert.equals(2, bici3.carga())
    assert.equals(11.2, bici3.peso())
    assert.notThat(bici3.tieneLuz())
    assert.equals(0, bici3.cantidadAccesoriosLivianos())
  }

//etapa 2:

  test "las bicis rapidas son la bici 1 y la bici 2" {
    assert.equals([bici1, bici2], mariadb.bicisRapidas())
  }

  test "las marcas de las bicis son olmo y legnano" {
    assert.equals(#{olmo, legnano}, mariadb.marcasDeLasBicis())
  }

  test "el deposito no es nocturno" {
    assert.notThat(mariadb.esDepositoNocturno())
  }

  test "tiene bici para llevar 10 kilos, no 50" {
    assert.that(mariadb.tieneBiciParaLlevar(10))
    assert.notThat(mariadb.tieneBiciParaLlevar(50))
  }

//etapa 3:

  test "la marca de la bici mas rapida es olmo" {
    assert.equals(olmo, mariadb.marcaDeLaBiciMasRapida())
  }

  test "la carga total de las bicis largas es de 0, ya que no hay una bici larga" {
    assert.equals(0, mariadb.cargaDeLasBicisLargas())
  }

  test "al agregar la bici 4, la carga total de las bicis largas es de 24" {
    bici4.agregarAccesorio(canastoB4)
    mariadb.agregarBicis([bici4])
    assert.equals(24, mariadb.cargaDeLasBicisLargas())
  }

  test "la cantidad de bicis sin accesorios en el deposito es de 0" {
    assert.equals(0, mariadb.cantidadDeBicisSinAccesorio())
  }

  test "al agregar la bici 5, la cantidad de bicis sin accesorios en el deposito es de 1" {
    mariadb.agregarBicis([bici5])
    assert.equals(1, mariadb.cantidadDeBicisSinAccesorio())
  }

//etapa 4:

  test "la bici compañera de la bici 5 es la bici 2" {
    assert.equals([bici2], mariadb.cualesBicisSonCompañerasDe(bici5))
  }
}